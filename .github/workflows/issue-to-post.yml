name: Issue to Post

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  issues: read

jobs:
  build_post:
    if: contains(github.event.issue.labels.*.name, 'blog:post')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prepare post content
        id: prep
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body || "";
            const lines = body.split('\n');

            function grab(label) {
              const idx = lines.findIndex(l => l.toLowerCase().includes(label.toLowerCase()));
              if (idx === -1) return "";
              for (let i = idx + 1; i < lines.length; i++) {
                const t = lines[i].trim();
                if (t && !t.startsWith('###')) return t;
              }
              return "";
            }

            const rawTitle = grab("Title") || issue.title.replace(/^\[Post\]:\s*/i, '').trim();
            const title = rawTitle || "Untitled";
            const rawSlug = grab("Slug") || title.toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'');
            const slug = rawSlug.slice(0,80) || "post";
            const publish = (grab("Publish date") || "").replace(/[^0-9-]/g,'');
            const tags = (grab("Tags") || "").split(',').map(t => t.trim()).filter(Boolean);
            const summary = grab("One-paragraph summary") || grab("summary");

            const bodyIdx = lines.findIndex(l => l.toLowerCase().includes("post body"));
            const md = bodyIdx !== -1 ? lines.slice(bodyIdx + 1).join('\n').trim() : body.trim();

            if (!publish) core.setFailed("Publish date is required (YYYY-MM-DD).");
            const filename = `_posts/${publish}-${slug}.md`;

            const fm = [
              '---',
              `title: "${title.replace(/"/g,'\\"')}"`,
              `date: ${publish}`,
              tags.length ? `tags: [${tags.join(', ')}]` : 'tags: []',
              summary ? `description: "${summary.replace(/"/g,'\\"')}"` : null,
              '---'
            ].filter(Boolean).join('\n');

            core.setOutput('filename', filename);
            core.setOutput('content', `${fm}\n\n${md}\n`);

      - name: Write post file
        run: |
          mkdir -p _posts
          printf "%s" "${{ steps.prep.outputs.content }}" > "${{ steps.prep.outputs.filename }}"

      - name: Update Posts.json (keep homepage in sync)
        uses: actions/github-script@v7
        env:
          FILENAME: ${{ steps.prep.outputs.filename }}
          CONTENT:  ${{ steps.prep.outputs.content }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const filename = process.env.FILENAME;   // e.g. _posts/2025-09-15-my-post.md
            const content  = process.env.CONTENT;    // front matter + body

            // Extract front matter portion (between first and second '---')
            const firstSep = content.indexOf('---');
            const secondSep = content.indexOf('---', firstSep + 3);
            const fmRaw = content.slice(firstSep + 3, secondSep).trim();
            const body  = content.slice(secondSep + 3).trim();

            function pick(re, fallback='') {
              const m = fmRaw.match(re);
              return m ? m[1].trim() : fallback;
            }

            const title   = pick(/^title:\s*"(.*)"/m, 'Untitled');
            const date    = pick(/^date:\s*([0-9-]+)/m, '');
            const tagsRaw = pick(/^tags:\s*\[(.*)\]/m, '');
            const tags    = tagsRaw ? tagsRaw.split(',').map(s => s.trim()).filter(Boolean) : [];
            const slug    = path.basename(filename, '.md').replace(/^\d{4}-\d{2}-\d{2}-/, '');

            // Build pretty Jekyll URL using /:year/:month/:day/:title/
            const [y, m, d] = date.split('-');
            const url = `/${y}/${m}/${d}/${slug}/`;

            // Make a short excerpt (strip basic markdown)
            const plain = body
              .replace(/^---[\s\S]*?---/g, '')
              .replace(/`{1,3}[\s\S]*?`{1,3}/g, '')
              .replace(/!\[[^\]]*\]\([^)]+\)/g, '')
              .replace(/\[[^\]]*\]\([^)]+\)/g, '')
              .replace(/[*_>#-]/g, '')
              .replace(/\s+/g, ' ')
              .trim();
            const excerpt = plain.slice(0, 160);

            // Rough read-time: 200 wpm
            const words = plain.split(/\s+/).filter(Boolean).length;
            const minutes = Math.max(1, Math.round(words / 200));

            const KNOWN = new Set(['poems','stories','faith','devotional','articles','essays']);
            const type = (tags.map(t => t.toLowerCase()).find(t => KNOWN.has(t)) || 'essay');

            const entry = {
              title, date, excerpt,
              type, views: 0, cover: '', minutes,
              url,               // pretty Jekyll URL (preferred)
              file: filename     // legacy fallback (post.html?file=...)
            };

            const jsonPath = path.join(process.cwd(), 'Posts.json');
            let arr = [];
            try {
              const raw = fs.readFileSync(jsonPath, 'utf8');
              arr = JSON.parse(raw);
              if (!Array.isArray(arr)) arr = [];
            } catch (_) { /* file may not exist yet */ }

            // De-duplicate by URL or file
            arr = arr.filter(p => (p.url !== url) && (p.file !== filename));

            // Prepend newest first
            arr.unshift(entry);

            fs.writeFileSync(jsonPath, JSON.stringify(arr, null, 2) + '\n', 'utf8');

      - name: Commit & push (post + Posts.json)
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git add "${{ steps.prep.outputs.filename }}" Posts.json
          git commit -m "chore(post): publish ${{ steps.prep.outputs.filename }} and update Posts.json" || echo "Nothing to commit"
          git push
